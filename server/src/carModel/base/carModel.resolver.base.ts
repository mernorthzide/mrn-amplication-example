/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCarModelArgs } from "./CreateCarModelArgs";
import { UpdateCarModelArgs } from "./UpdateCarModelArgs";
import { DeleteCarModelArgs } from "./DeleteCarModelArgs";
import { CarModelCountArgs } from "./CarModelCountArgs";
import { CarModelFindManyArgs } from "./CarModelFindManyArgs";
import { CarModelFindUniqueArgs } from "./CarModelFindUniqueArgs";
import { CarModel } from "./CarModel";
import { CarModelService } from "../carModel.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CarModel)
export class CarModelResolverBase {
  constructor(
    protected readonly service: CarModelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CarModel",
    action: "read",
    possession: "any",
  })
  async _carModelsMeta(
    @graphql.Args() args: CarModelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CarModel])
  @nestAccessControl.UseRoles({
    resource: "CarModel",
    action: "read",
    possession: "any",
  })
  async carModels(
    @graphql.Args() args: CarModelFindManyArgs
  ): Promise<CarModel[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CarModel, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CarModel",
    action: "read",
    possession: "own",
  })
  async carModel(
    @graphql.Args() args: CarModelFindUniqueArgs
  ): Promise<CarModel | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CarModel)
  @nestAccessControl.UseRoles({
    resource: "CarModel",
    action: "create",
    possession: "any",
  })
  async createCarModel(
    @graphql.Args() args: CreateCarModelArgs
  ): Promise<CarModel> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CarModel)
  @nestAccessControl.UseRoles({
    resource: "CarModel",
    action: "update",
    possession: "any",
  })
  async updateCarModel(
    @graphql.Args() args: UpdateCarModelArgs
  ): Promise<CarModel | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CarModel)
  @nestAccessControl.UseRoles({
    resource: "CarModel",
    action: "delete",
    possession: "any",
  })
  async deleteCarModel(
    @graphql.Args() args: DeleteCarModelArgs
  ): Promise<CarModel | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
